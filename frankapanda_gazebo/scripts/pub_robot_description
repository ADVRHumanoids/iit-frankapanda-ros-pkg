#!/usr/bin/env python3

# Copyright 2024 HHCM, Istituto Italiano di Tecnologia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rclpy
from rclpy.node import Node
from rclpy.time import Time
from rclpy.qos import QoSProfile, DurabilityPolicy

from std_msgs.msg import String

class RobotDescriptionPublisher(Node):

    def __init__(self, rate):
        super().__init__("robot_description_publisher")

        self.declare_parameter("topic_name", "robot_description")
        topic_name = self.get_parameter("topic_name").get_parameter_value().string_value

        self.declare_parameter("urdf_string", rclpy.Parameter.Type.STRING)
        urdf_string = None
        if self.has_parameter("urdf_string"):
            urdf_string = self.get_parameter("urdf_string").get_parameter_value().string_value
        else:
            self.get_logger().error('Parameter "urdf_string" not set!')
            raise Exception('Parameter "urdf_string" not set!')
        self.urdf_string_msg = String()
        self.urdf_string_msg.data = urdf_string

        self.get_logger().info(f'Publishing on "{topic_name}"')

        # QOS because otherwise the gz spawner does not receive the message properly
        self.publisher = self.create_publisher(String, topic_name, QoSProfile(depth=1,durability=DurabilityPolicy.TRANSIENT_LOCAL))
        self.timer = self.create_timer(1.0 / rate, self.publish_robot_description)

    def publish_robot_description(self):
        self.publisher.publish(self.urdf_string_msg)


def main(args=None):
    rclpy.init(args=args)
    robot_description_publisher = RobotDescriptionPublisher(rate=20)

    try:
        rclpy.spin(robot_description_publisher)

    except Exception as e:
        robot_description_publisher.get_logger().error("Exception: %s" % str(e))

    robot_description_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()